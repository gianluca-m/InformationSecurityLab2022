theory EncryptedDH2
begin

/* Signed Diffie-Hellman protocol, second attempt:
   A -> B : aenc_B{A, g^x}  (x fresh)
   B -> A : aenc_A{B, g^y, h(g^x)}  (y fresh)
   A -> B : aenc_B{A, h(g^y)}  */


/* ----------------- */
/* Equational theory */
/* ----------------- */

/* Load the built-in Diffie-Hellman, asymmetric encryption and hashing equational theories */
builtins: diffie-hellman, asymmetric-encryption, hashing



/* ------------------ */
/* Key infrastructure */
/* ------------------ */

rule genkey: 
   [ Fr(~kA) ] 
   -->
   [ !Key($A, ~kA),  
     !Pk($A, pk(~kA)),
     Out(pk(~kA)) ]


/* Question 6*/

/*----------------*/
/* Protocol rules */
/*----------------*/
rule Init_1:
  let gx = 'g'^~x
  in 
    [ !Key($A, ~skA),
      !Pk(b, pkB),
      Fr(~x) ]
    -->
    [ Out(aenc(<$A, gx>, pkB)),
      Init_1($A, b, ~skA, pkB, ~x, gx) ]


rule Resp_1:
  let gy = 'g'^~y
  in
    [ !Key($B, ~skB),
      !Pk(a, pkA),
      Fr(~y),
      In(aenc(<a, gx>, pk(~skB))) ]
    --[ RunningR($B, a, gx^~y) ]->
    [ Out(aenc(<$B, gy, h(gx)>, pkA)),
      Resp_1($B, a, ~skB, pkA, ~y, gy, gx) ]


rule Init_2:
    [ Init_1($A, b, ~skA, pkB, ~x, gx),
      In(aenc(<b, gy, hgx>, pk(~skA))) ]
    --[ Eq(h(gx), hgx),
        FinishedI($A),
        SecretI($A, b, gy^~x),
        RunningI($A, b, gy^~x),
        CommitI($A, b, gy^~x) ]->
    [ Out(aenc(<$A, h(gy)>, pkB)) ]


rule Resp_2:
    [ Resp_1($B, a, ~skB, pkA, ~y, gy, gx), 
      In(aenc(<a, hgy>, pk(~skB)))]
    --[ Eq(h(gy), hgy),
        FinishedR($B),
        SecretR(a, $B, gx^~y),
        CommitR($B, a, gx^~y) ]->
    []


/* ---------- */
/* Key Reveal */
/* ---------- */
rule Compromise_Agent:
  [!Key(A, k)]
  --[Compromised(A)]->
  [Out(k)]





/* ---------- */
/* Restrictions */
/* ---------- */

restriction equality:
"All x y #i. Eq(x,y) @i ==> x = y"


/* ---------- */
/* Properties */
/* ---------- */

/* Executability checks */
lemma executableI:
exists-trace "Ex #i A. FinishedI(A) @ i & not (Ex #j B. Compromised(B)@j)"

lemma executableR:
exists-trace "Ex #i B. FinishedR(B) @ i & not (Ex #j B. Compromised(B)@j)"


/* Secrecy and agreement properties */

lemma key_secrecyI:
"All #i A B k.
 (SecretI(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"

lemma key_secrecyR:
"All #i A B k.
 (SecretR(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"


lemma agreementR:
"All #i A B k.
  (CommitR( B, A, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningI(A, B, k) @ j & j < i)"

lemma agreementI:
"All #i A B k.
  (CommitI( A, B, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningR(B, A, k) @ j & j < i)"


end


