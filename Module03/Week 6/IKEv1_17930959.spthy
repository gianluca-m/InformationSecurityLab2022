theory IKEv1
begin

/* IKEv1 protocol:
   A -> B : aenc_B{A}, aenc_B{N_A}, g^x  (N_A fresh nonce, x fresh)
   B -> A : aenc_A{B}, aenc_A{N_B}, g^y, HASH_B  (y fresh)
   A -> B : HASH_A
where:
   HASH_A = prf(<skID, g^x, g^y, A, B>)
   HASH_B = prf(<skID, g^y, g^x, B, A>)
   skID = prf(<h(<N_A, N_B>), A, B>)

     */


/* ----------------- */
/* Equational theory */
/* ----------------- */

/* Load the built-in Diffie-Hellman and signature equational theories */
builtins: diffie-hellman, asymmetric-encryption, hashing

/*Define an abstract function prf with no additional algebraic properties
representing a "perfect" pseudo-random function. */
functions: prf/1


/* ------------------ */
/* Key infrastructure */
/* ------------------ */

rule genkey:
   [ Fr(~kA) ] 
   -->
   [ !Key($A, ~kA),
     !Pk($A, pk(~kA)),
     Out(pk(~kA)) ]



/* Question 7*/

/*----------------*/
/* Protocol rules */
/*----------------*/
rule Init_1:
  let gx = 'g'^~x
  in
    [ !Key($A, ~skA),
      !Pk(b, pkB), 
      Fr(~x),
      Fr(~Na) ]
    -->
    [ Out(<aenc($A, pkB), aenc(~Na, pkB), gx>),
      Init_1($A, b, ~skA, pkB, ~x, gx, ~Na) ]


rule Resp_1:
  let gy = 'g'^~y
      a = adec(m1, ~skB)
      Na = adec(m2, ~skB)
      skID = prf(<h(<Na, ~Nb>), a, $B>)
      HashB = prf(<skID, gy, gx, $B, a>)
      kAB = prf(<skID, gx^~y>)
  in
    [ !Key($B, ~skB),
      !Pk(a, pkA),
      Fr(~y),
      Fr(~Nb),
      In(<m1, m2, gx>) ]
    --[ RunningR($B, a, kAB) ]->
    [ Out(<aenc($B, pkA), aenc(~Nb, pkA), gy, HashB>),
      Resp_1($B, a, ~skB, pkA, ~y, gy, gx, ~Nb, skID, HashB) ]


rule Init_2:
  let b = adec(m1, ~skA)
      Nb = adec(m2, ~skA)
      skID = prf(<h(<~Na, Nb>), $A, b>)
      HashA = prf(<skID, gx, gy, $A, b>)
      kAB = prf(<skID, gy^~x>)
  in
    [ Init_1($A, b, ~skA, pkB, ~x, gx, ~Na),
      In(<m1, m2, gy, HashB>) ]
    --[ Eq(HashB, prf(<skID, gy, gx, b, $A>)),
        FinishedI($A),
        SecretI($A, b, kAB),
        RunningI($A, b, kAB),
        CommitI($A, b, kAB) ]->
    [ Out(HashA) ]


rule Resp_2:
  let kAB = prf(<skID, gx^~y>)
  in
    [ Resp_1($B, a, ~skB, pkA, ~y, gy, gx, ~Nb, skID, HashB),
      In(HashA) ]
    --[ Eq(HashA, prf(<skID, gx, gy, a, $B>)),
        FinishedR($B),
        SecretR(a, $B, kAB),
        CommitR($B, a, kAB) ]->
    []



/* ---------- */
/* Key Reveal */
/* ---------- */
rule Compromise_Agent:
  [!Key(A, k)]
  --[Compromised(A)]->
  [Out(k)]





/* ---------- */
/* Restrictions */
/* ---------- */

restriction equality:
"All x y #i. Eq(x,y) @i ==> x = y"


/* ---------- */
/* Properties */
/* ---------- */

/* Executability checks */
lemma executableI:
exists-trace "Ex #i A. FinishedI(A) @ i & not (Ex #j B. Compromised(B)@j)"

lemma executableR:
exists-trace "Ex #i B. FinishedR(B) @ i & not (Ex #j B. Compromised(B)@j)"


/* Secrecy and agreement properties */

lemma key_secrecyI:
"All #i A B k.
 (SecretI(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"

lemma key_secrecyR:
"All #i A B k.
 (SecretR(A, B, k) @ i &
  not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
  ==> not (Ex #j. K(k) @ j)"


lemma agreementR:
"All #i A B k.
  (CommitR( B, A, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningI(A, B, k) @ j & j < i)"

lemma agreementI:
"All #i A B k.
  (CommitI( A, B, k) @ i &
   not ((Ex #l. Compromised(A) @ l) | (Ex #m. Compromised(B) @ m)))
   ==> (Ex #j. RunningR(B, A, k) @ j & j < i)"



/* Perfect Forward Secrecy:  (Question 8)
Please uncomment the following two lemmas for this question.
*/

lemma secrecy_PFS_R:
 " All A B k #i. 
    SecretR(A, B, k) @i &
      not ((Ex #l. (Compromised(A) @ l & l<i )) | (Ex #m. (Compromised(B) @ m & m < i)) )  
    ==> not (Ex #j. K(k)@j )"

lemma secrecy_PFS_I:
 " All A B k #i. 
    SecretI(A, B, k) @i &
      not ((Ex #l. (Compromised(A) @ l & l<i )) | (Ex #m. (Compromised(B) @ m & m < i)) )  
    ==> not (Ex #j. K(k)@j )"


end


